<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>edibotopic | blog</title>
	<subtitle>Writing on food, technology and philosophy</subtitle>
	<link href="https://edibotopic.com/blog/drafting/feed.xml" rel="self" type="application/atom+xml"/>
    <link href="https://edibotopic.com/blog/drafting/"/>
	<updated>2023-10-30T00:00:00+00:00</updated>
	<id>https://edibotopic.com/blog/drafting/feed.xml</id>
	<entry xml:lang="en">
		<title>Spatial Programming: Connecting Across Disciplines</title>
		<published>2023-10-30T00:00:00+00:00</published>
		<updated>2023-10-30T00:00:00+00:00</updated>
        <summary>&lt;p&gt;Since encountering &lt;em&gt;spatial programming&lt;&#x2F;em&gt; I have wanted to explore some
tentative connections with similar projects in other fields, for the sake of sheer
curiosity and cultivating a shared sense of purpose.&lt;&#x2F;p&gt;
</summary>
		<link href="https://edibotopic.com/blog/drafting/spatial-programming/" type="text/html"/>
		<id>https://edibotopic.com/blog/drafting/spatial-programming/</id>
		<content type="html">&lt;p&gt;Since encountering &lt;em&gt;spatial programming&lt;&#x2F;em&gt; I have wanted to explore some
tentative connections with similar projects in other fields, for the sake of sheer
curiosity and cultivating a shared sense of purpose.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;hello-tode&quot;&gt;Hello Tode&lt;a class=&quot;zola-anchor&quot; href=&quot;#hello-tode&quot; aria-label=&quot;Anchor link for: hello-tode&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote class=&quot;callout warning&quot;&gt;
    
    &lt;div class=&quot;icon&quot;&gt;
        &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;20&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.865 3.00017L22.3912 19.5002C22.6674 19.9785 22.5035 20.5901 22.0252 20.8662C21.8732 20.954 21.7008 21.0002 21.5252 21.0002H2.47266C1.92037 21.0002 1.47266 20.5525 1.47266 20.0002C1.47266 19.8246 1.51886 19.6522 1.60663 19.5002L11.1329 3.00017C11.4091 2.52187 12.0206 2.358 12.4989 2.63414C12.651 2.72191 12.7772 2.84815 12.865 3.00017ZM4.20471 19.0002H19.7932L11.9989 5.50017L4.20471 19.0002ZM10.9989 16.0002H12.9989V18.0002H10.9989V16.0002ZM10.9989 9.00017H12.9989V14.0002H10.9989V9.00017Z&quot; fill=&quot;currentColor&quot;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;content&quot;&gt;
        
        &lt;p&gt;&lt;strong&gt;Draft&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
        &lt;p&gt;This is a draft and will be revised for clarity and
completeness in a future version.&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Have you heard of &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;TodePond&quot;&gt;TodePond&lt;&#x2F;a&gt;?
They&#x27;re great.
You should watch their YouTube &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;@TodePond&quot;&gt;videos&lt;&#x2F;a&gt; and play with
their &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;TodePond&quot;&gt;software&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;A general theme of &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.todepond.com&#x2F;wikiblogarden&#x2F;my-name&#x2F;&quot;&gt;Lu(ke)&lt;&#x2F;a&gt;&#x27;s work is &lt;em&gt;spatial programming&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;TodePond&#x2F;SandPond&quot;&gt;SandPond&lt;&#x2F;a&gt; complex
particle-based physics simulations can be generated using a 
spatial programming language named &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;TodePond&#x2F;SpaceTode&quot;&gt;SpaceTode&lt;&#x2F;a&gt;.
SpaceTode has &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;Tpvcy1gt5yU?si=SDZbp509Y8WeLORZ&amp;amp;t=77&quot;&gt;symbols&lt;&#x2F;a&gt; that each represent things like 
atoms, space and transitions.
SpaceTode &lt;a href=&quot;https:&#x2F;&#x2F;edibotopic.com&#x2F;blog&#x2F;drafting&#x2F;spatial-programming&#x2F;m&#x2F;watch?v=L2U_Sd1qMJ4&amp;amp;t=2580s&quot;&gt;was inspired by&lt;&#x2F;a&gt; the graphical programming environment &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;http:&#x2F;&#x2F;acypher.com&#x2F;creator&#x2F;&quot;&gt;Stagecast Creator&lt;&#x2F;a&gt; and the spatial programming language &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DaveAckley&#x2F;SPLAT&quot;&gt;SPLAT&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Consider the following &lt;em&gt;rule&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;When an atom (&lt;code&gt;@&lt;&#x2F;code&gt;) is above an empty space (&lt;code&gt;_&lt;&#x2F;code&gt;)
a transition (&lt;code&gt;=&amp;gt;&lt;&#x2F;code&gt;) will follow in which the
atom falls below that space.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This is encoded as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; class=&quot;language-go z-code&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;z-source z-go&quot;&gt;@ &lt;span class=&quot;z-keyword z-operator z-assignment z-go&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-go&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-language z-blank z-go&quot;&gt;_&lt;&#x2F;span&gt;
&lt;span class=&quot;z-variable z-language z-blank z-go&quot;&gt;_&lt;&#x2F;span&gt;    @
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;From a set of such rules &lt;strong&gt;elements&lt;&#x2F;strong&gt; can be defined, such as sand,
rock and water, which can then be &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;sandpond.cool&#x2F;&quot;&gt;dropped into a 3D environment to
create complex visualisations&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;There is also &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;cellpond.cool&#x2F;&quot;&gt;CellPond&lt;&#x2F;a&gt;, which presents a
drag-and-drop interface for creating your own rules for generating 2D
visualisations.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;iconic-signs&quot;&gt;Iconic Signs&lt;a class=&quot;zola-anchor&quot; href=&quot;#iconic-signs&quot; aria-label=&quot;Anchor link for: iconic-signs&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Programming has been used to make visualisations
of space for many years.&lt;&#x2F;p&gt;
&lt;p&gt;When I wanted to make &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;edibotopic.github.io&#x2F;stokes-law&#x2F;&quot;&gt;a
simulation&lt;&#x2F;a&gt; to show what
affects the rate at which particles sink and float I wrote the code in a
conventional style:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; class=&quot;language-js z-code&quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-class z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-ts&quot;&gt;class&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-class z-ts&quot;&gt;Ball&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;{&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-method z-declaration z-ts&quot;&gt;  &lt;span class=&quot;z-storage z-type z-ts&quot;&gt;constructor&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-parameters z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-begin z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-ts&quot;&gt;x&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-parameter z-ts&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-ts&quot;&gt;y&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-parameter z-ts&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-ts&quot;&gt;dx&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-parameter z-ts&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-ts&quot;&gt;dy&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-parameter z-ts&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-ts&quot;&gt;r&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-parameter z-ts&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-ts&quot;&gt;colour&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-end z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-variable z-language z-this z-ts&quot;&gt;this&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-variable z-property z-dom z-ts&quot;&gt;x&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;x&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-variable z-language z-this z-ts&quot;&gt;this&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-variable z-property z-dom z-ts&quot;&gt;y&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;y&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-variable z-language z-this z-ts&quot;&gt;this&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-property z-ts&quot;&gt;dx&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;dx&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-variable z-language z-this z-ts&quot;&gt;this&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-property z-ts&quot;&gt;dy&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;dy&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-variable z-language z-this z-ts&quot;&gt;this&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-property z-ts&quot;&gt;r&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;r&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-variable z-language z-this z-ts&quot;&gt;this&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-property z-ts&quot;&gt;base_r&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;r&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-variable z-language z-this z-ts&quot;&gt;this&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-property z-ts&quot;&gt;colour&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;colour&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;z-meta z-method z-declaration z-ts&quot;&gt;  &lt;span class=&quot;z-meta z-definition z-method z-ts&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-ts&quot;&gt;draw&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-parameters z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-begin z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-end z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-object z-ts&quot;&gt;canvas&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-ts&quot;&gt;beginPath&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-object z-ts&quot;&gt;canvas&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-ts&quot;&gt;arc&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-this z-ts&quot;&gt;this&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-variable z-property z-dom z-ts&quot;&gt;x&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-language z-this z-ts&quot;&gt;this&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-variable z-property z-dom z-ts&quot;&gt;y&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-language z-this z-ts&quot;&gt;this&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-property z-ts&quot;&gt;r&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-math z-ts&quot;&gt;Math&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-property z-math z-ts&quot;&gt;PI&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-ts&quot;&gt;*&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-boolean z-false z-ts&quot;&gt;false&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-object z-ts&quot;&gt;canvas&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-ts&quot;&gt;closePath&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-variable z-other z-object z-ts&quot;&gt;canvas&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-property z-ts&quot;&gt;fillStyle&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-language z-this z-ts&quot;&gt;this&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-property z-ts&quot;&gt;colour&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-object z-ts&quot;&gt;canvas&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-ts&quot;&gt;fill&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-object z-ts&quot;&gt;canvas&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-ts&quot;&gt;stroke&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;While this code (in part) generates a spatial visualisation,
it cannot be considered an example of spatial programming.&lt;&#x2F;p&gt;
&lt;p&gt;The code is an abstract &lt;strong&gt;symbolic&lt;&#x2F;strong&gt; representation that bears no &lt;em&gt;salient&lt;&#x2F;em&gt;
resemblance to the spatial arrangement that it generates.&lt;&#x2F;p&gt;
&lt;p&gt;Contrast this with a rule in SpaceTode, which encodes that an
atom has a tendency to move to the left:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; class=&quot;language-go z-code&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;z-source z-go&quot;&gt;&lt;span class=&quot;z-variable z-language z-blank z-go&quot;&gt;_&lt;&#x2F;span&gt;@ &lt;span class=&quot;z-keyword z-operator z-assignment z-go&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-go&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; @&lt;span class=&quot;z-variable z-language z-blank z-go&quot;&gt;_&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Such rules are &lt;strong&gt;iconic&lt;&#x2F;strong&gt;, in they immediately
offer us the possibility of a spatial interpretation.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;In spatial programming, the rule &lt;strong&gt;looks like&lt;&#x2F;strong&gt; the result&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Spatial programming then does not just concern the use of code to
generate interesting spatial visualisations, although that is an
obvious use-case. 
Spatial programming fosters an intuitive connection between the
&lt;em&gt;signifier&lt;&#x2F;em&gt; (some iconic representation) and the &lt;em&gt;signified&lt;&#x2F;em&gt; (a useful
result that is generated).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;spatial-logics&quot;&gt;Spatial Logics&lt;a class=&quot;zola-anchor&quot; href=&quot;#spatial-logics&quot; aria-label=&quot;Anchor link for: spatial-logics&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The concept of spatial programming reminds me of
&lt;em&gt;spatial logic&lt;&#x2F;em&gt;, a field that I take to
encompass mereotopology&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; and formal ontology&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Philosophers, logicians and computer scientists
in this field attempt to develop formal systems
for describing &lt;strong&gt;regions&lt;&#x2F;strong&gt;.
Typically these regions are &lt;em&gt;spatial&lt;&#x2F;em&gt; but they are occasionally
temporal, spatiotemporal or — most broadly of all — metaphysical.&lt;&#x2F;p&gt;
&lt;p&gt;Mereotopology begins with some primitive
relation, typically parthood ($P$) or connection ($C$).
To signify $x$ is connected to $y$ we can write:&lt;&#x2F;p&gt;
&lt;p&gt;$$xCy$$&lt;&#x2F;p&gt;
&lt;p&gt;Then axioms are constructed using this notion of connection;
for example, it can be stipulated that &lt;em&gt;for all x&lt;&#x2F;em&gt; ($\forall x$) this relation is &lt;em&gt;reflexive&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;$$\forall x(xCx)$$&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Every thing is connected to itself.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It can also be stipulated that connection is &lt;em&gt;symmetric&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;$$\forall xy (xCy \to yCx)$$&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;If a thing connects to a second thing, then
that second thing must connect to the first.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The arrow here stands for &lt;strong&gt;logical implication&lt;&#x2F;strong&gt;.
Arrows in SpaceTode might instead be understood to signify a &lt;strong&gt;causal
implication&lt;&#x2F;strong&gt;, by virtue of their generating a side-effect in the real
world (a cool visualisation).&lt;&#x2F;p&gt;
&lt;p&gt;In &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.researchgate.net&#x2F;publication&#x2F;221393453_A_Spatial_Logic_based_on_Regions_and_Connection&quot;&gt;a spatial logic&lt;&#x2F;a&gt; a set of these simple axioms are used to define ($:=$)
other spatial relations, including disconnection ($DC$) and parthood ($P$):&lt;&#x2F;p&gt;
&lt;p&gt;$$xDCy \ := \ \neg xCy$$&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;A thing is disconnected from another if they are not ($\neg$) connected.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;$$xPy \ := \ \forall z(zCx \to zCy)$$&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;An x is part of a y if anything that connects to x must also connect to y.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In this way all descriptions of space can be reduced to
the idea of connection.
Likewise, in SandPond complex spatial visualisations are
generated from simple rules.&lt;&#x2F;p&gt;
&lt;p&gt;Spatial logics are like spatial programming languages in that they
attempt to encode the concept of spaces in symbols.
Unlike spatial programming languages, however, spatial logics emphasise 
symbolic rather than iconic representations.
The formulas $xCy$, $zDCk$ and $jPi$ are just strings of characters.
They each represent different topological spaces
(x connected to y, z is disconnected from y, j is part of i) but 
do not resemble them.&lt;&#x2F;p&gt;
&lt;p&gt;Another key distinction between the two is that spatial programming
is oriented towards the generative.
Spatial programming languages are designed with a view to creating 
interesting things, whereas spatial logics are designed to clarify
the underlying logic of our spatial descriptions.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dispersed-systems&quot;&gt;Dispersed Systems&lt;a class=&quot;zola-anchor&quot; href=&quot;#dispersed-systems&quot; aria-label=&quot;Anchor link for: dispersed-systems&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Like spatial logic, the Dispersed System Formalism (&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.sciencedirect.com&#x2F;science&#x2F;article&#x2F;abs&#x2F;pii&#x2F;S0378517307006527&quot;&gt;DSF&lt;&#x2F;a&gt;) 
aims to find a concise symbolic language for describing 
complex spaces in a consistent way.&lt;&#x2F;p&gt;
&lt;p&gt;DSF, however, is also a bit like spatial programming.
Firstly, it is intended to be used as a tool to create interesting
things, like food structures.
Secondly, in its choice of symbols it is arguably more &lt;em&gt;iconic&lt;&#x2F;em&gt; than
symbolic &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#3&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In DSF the symbol $@$ represents a relation, equivalent to 
the notion of parthood (topological enclosure).
To say $x$ is enclosed in $y$ we write:&lt;&#x2F;p&gt;
&lt;p&gt;$$x@y$$&lt;&#x2F;p&gt;
&lt;p&gt;Look at that $@$: it resembles a thing (the character &#x27;a&#x27;)
enclosed in another thing (a circle).
It is &lt;em&gt;iconic&lt;&#x2F;em&gt;, like the symbols we saw in SpaceTode.
The symbol resembles the spatial relation it represents.&lt;&#x2F;p&gt;
&lt;p&gt;Unusually for the area of science from which it emerged, papers on DSF
include actual (symbolic) code, which can be used to generate DSF formulas.
Unfortunately the code is written in the proprietary Maple software,
but I have slapped together a basic version in Python below.
The code basically loops through a list of atoms and relations
to create the possible binary formulas that result:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; class=&quot;language-py z-code&quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-python&quot;&gt;#&lt;&#x2F;span&gt; Components of DSF formulas 
&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;atoms_left&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-sequence z-list z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-python&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;x&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;y&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;z&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;relations&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-sequence z-list z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-python&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;@&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;+&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;&#x2F;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;atoms_right&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-sequence z-list z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-python&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;x&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;y&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;z&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;z-comment z-line z-number-sign z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-python&quot;&gt;#&lt;&#x2F;span&gt; Generate binary DSF formulas
&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-statement z-loop z-for z-python&quot;&gt;&lt;span class=&quot;z-keyword z-control z-loop z-for z-python&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;atomL&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-loop z-for z-in z-python&quot;&gt;in&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-statement z-loop z-for z-python&quot;&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;atoms_left&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-statement z-loop z-for z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-loop z-for z-python&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-meta z-statement z-loop z-for z-python&quot;&gt;&lt;span class=&quot;z-keyword z-control z-loop z-for z-python&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;relation&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-loop z-for z-in z-python&quot;&gt;in&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-statement z-loop z-for z-python&quot;&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;relations&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-statement z-loop z-for z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-loop z-for z-python&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-meta z-statement z-loop z-for z-python&quot;&gt;&lt;span class=&quot;z-keyword z-control z-loop z-for z-python&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;atomR&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-loop z-for z-in z-python&quot;&gt;in&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-statement z-loop z-for z-python&quot;&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;atoms_right&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-statement z-loop z-for z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-loop z-for z-python&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
            &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-builtin z-python&quot;&gt;print&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;atomL&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-python&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;relation&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-python&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;atomR&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;z-comment z-line z-number-sign z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-python&quot;&gt;#&lt;&#x2F;span&gt; Prints: x@x x@y x@z x+x x+y x+z x&#x2F;x x&#x2F;y x&#x2F;z y@x ...
&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here is how a rule might be written in DSF for a
system that has an emulsion (oil-in-water) structure:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;O &#x2F; W =&amp;gt; O σ W
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote class=&quot;callout important&quot;&gt;
    
    &lt;div class=&quot;icon&quot;&gt;
        &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;20&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22ZM12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20ZM11 15H13V17H11V15ZM11 7H13V13H11V7Z&quot; fill=&quot;currentColor&quot;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;content&quot;&gt;
        
        &lt;p&gt;&lt;strong&gt;Aside&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
        &lt;p&gt;In DSF, the symbols $&#x2F;$ and $\sigma$ mean &amp;quot;dispersed in&amp;quot; (think: oil
droplets in water) and
&amp;quot;on top of&amp;quot; (think: icing on cake), respectively.&lt;&#x2F;p&gt;
&lt;p&gt;The $\sigma$ looks like a cap on top of an &#x27;o&#x27; (iconic),
while the $&#x2F;$ signifies the mathematical notion of division 
(symbolic).&lt;&#x2F;p&gt;
&lt;p&gt;The use of $&#x2F;$ is conventional for dispersed systems in science; given that it refers to discrete particles ($ n \geq 2$) the colon symbol 
&amp;quot;$:$&amp;quot; might be a suitable iconic alternative.&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The rule states that if oil is dispersed in water the
oil will transition to a state in which it is floating on
top of the water.&lt;&#x2F;p&gt;
&lt;p&gt;In SpaceTode, this would be something like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; class=&quot;language-go z-code&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;z-source z-go&quot;&gt;&lt;span class=&quot;z-variable z-other z-go&quot;&gt;W&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-go&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-go&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-go&quot;&gt;O&lt;&#x2F;span&gt;
&lt;span class=&quot;z-variable z-other z-go&quot;&gt;O&lt;&#x2F;span&gt;    &lt;span class=&quot;z-variable z-other z-go&quot;&gt;W&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I am reminded that people in seemingly-distant areas
of inquiry often work on similar problems with analogous tools&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#4&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;paper-tools&quot;&gt;Paper Tools&lt;a class=&quot;zola-anchor&quot; href=&quot;#paper-tools&quot; aria-label=&quot;Anchor link for: paper-tools&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The historian Ursula Klein &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;Experiments-Models-Paper-Tools-Nineteenth&#x2F;dp&#x2F;0804743592&quot;&gt;has written&lt;&#x2F;a&gt; extensively
on the role of &lt;strong&gt;Paper Tools&lt;&#x2F;strong&gt; in science.&lt;&#x2F;p&gt;
&lt;p&gt;A paper tool is anything that can be put on paper,
or any other surface, which helps us think about
difficult things and imagine new possibilities.&lt;&#x2F;p&gt;
&lt;p&gt;When scientists are asked about the importance of
something like a chemical equation they tend to
speak about accuracy, precision and quantification.&lt;&#x2F;p&gt;
&lt;p&gt;While these are important features, Klein thinks
that such &lt;em&gt;paper tools&lt;&#x2F;em&gt; also enhance our capacity
to imagine and invent.&lt;&#x2F;p&gt;
&lt;p&gt;Going to back to TodePond for a moment, once we
understand that the rule for sinking is:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;@ =&amp;gt; _
_    @
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;then it is easy to imagine the rule for floating:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;_ =&amp;gt; @
@    _
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The spatial nature of the language both eases the cognitive 
leap to the resultant visualisation but also the creative
progression to new rule-sets.
These are positive features of SpaceTode &lt;em&gt;as a paper tool&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Another paper tool — the chemical equation — is not simply a 
tool for labelling things that already exist in the world, 
it also allows us to question and imagine how they might be combined.&lt;&#x2F;p&gt;
&lt;p&gt;Once we acknowledge the existence of the elements carbon, hydrogen and
oxygen we can formulate a question as follows:&lt;&#x2F;p&gt;
&lt;p&gt;$$C + H + O = \ ?$$&lt;&#x2F;p&gt;
&lt;p&gt;A synthetic chemist recognises the creative potential of such
equations, yet they are unlike spatial programming languages
in that they are symbolic and not iconic.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Things could have been different...&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;What we now recognise as standard chemical notation has its origins in symbolic
innovations made by chemists from Sweden (Berzelius) and France 
(Lavoisier).&lt;&#x2F;p&gt;
&lt;p&gt;The English chemist Dalton had presented an alternative notation that 
was more &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.compoundchem.com&#x2F;2016&#x2F;09&#x2F;06&#x2F;dalton&#x2F;&quot;&gt;iconic&lt;&#x2F;a&gt; in nature. 
He was especially focused on representing the spatial arrangements of
atoms, having just proposed an influential atomic model.&lt;&#x2F;p&gt;
&lt;p&gt;The reasons behind the ultimate rejection of his icons in favour of
the modern symbolic version were often prosaic.
For example, Dalton&#x27;s icons were more difficult to
type-set using the technology of the time.&lt;&#x2F;p&gt;
&lt;p&gt;Later developments in chemistry, such as the
&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.nature.com&#x2F;articles&#x2F;465036a&quot;&gt;discovery of the benzene ring structure&lt;&#x2F;a&gt;, relied
greatly on a &lt;em&gt;spatial intuition&lt;&#x2F;em&gt; that could not be
realised through a strict adherence to the symbolic
notation that was available to chemists at the time.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;end&quot;&gt;End&lt;a class=&quot;zola-anchor&quot; href=&quot;#end&quot; aria-label=&quot;Anchor link for: end&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;While symbolic systems can be very powerful — see mathematics,
chemistry and programming — they can sometimes present barriers to
learning and creation.&lt;&#x2F;p&gt;
&lt;p&gt;Spatial programmers like TodePond are showing how effective and
joyful
more &lt;em&gt;iconic&lt;&#x2F;em&gt; languages can be when designing visual effects.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.frontiersin.org&#x2F;articles&#x2F;10.3389&#x2F;fpsyg.2022.890362&#x2F;full&quot;&gt;Others have proposed&lt;&#x2F;a&gt;
that teaching with
concrete &lt;em&gt;icons&lt;&#x2F;em&gt; rather than abstract symbols may benefit learners
who typically struggle with mathematics.&lt;&#x2F;p&gt;
&lt;p&gt;Spatial programming could be a generative topic for thinkers and
practitioners from different fields to explore alternative means
of representing space.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;a class=&quot;zola-anchor&quot; href=&quot;#notes&quot; aria-label=&quot;Anchor link for: notes&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;Mereotopology is a combination of mereology (the study of
&lt;em&gt;parts&lt;&#x2F;em&gt;) and topology (the study of &lt;em&gt;connection&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;2&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;Formal ontology combines the classical philosophical
study of &lt;em&gt;being&lt;&#x2F;em&gt; with the formal apparatus of &lt;em&gt;logic&lt;&#x2F;em&gt;, usually
with a view to developing coherent systems of classification
(formal ontologies).&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;3&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;3&lt;&#x2F;sup&gt;
&lt;p&gt;The repeated distinction I make between the &lt;em&gt;iconic&lt;&#x2F;em&gt; and the &lt;em&gt;symbolic&lt;&#x2F;em&gt; broadly follows the &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;plato.stanford.edu&#x2F;entries&#x2F;peirce-semiotics&#x2F;&quot;&gt;semiotics of Peirce&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;4&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;4&lt;&#x2F;sup&gt;
&lt;p&gt;There is no DSF tool that generates visualisations of the structures its formulas represent.
This is why I made &lt;a href=&quot;https:&#x2F;&#x2F;edibotopic.com&#x2F;blog&#x2F;doing&#x2F;dsf-racket&#x2F;&quot;&gt;DSF-racket&lt;&#x2F;a&gt;.
While less visually-enthralling than TodePond&#x27;s creations it is similar conceptually and attempts to make salient the connection between iconic formulas and the visualisations they generate.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
</feed>