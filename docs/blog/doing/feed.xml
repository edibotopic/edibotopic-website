<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>edibotopic | blog</title>
	<subtitle>Writing on food, technology and philosophy</subtitle>
	<link href="https://edibotopic.com/blog/doing/feed.xml" rel="self" type="application/atom+xml"/>
    <link href="https://edibotopic.com/blog/doing/"/>
	<updated>2023-12-02T00:00:00+00:00</updated>
	<id>https://edibotopic.com/blog/doing/feed.xml</id>
	<entry xml:lang="en">
		<title>New Music Created with Arroost</title>
		<published>2023-12-02T00:00:00+00:00</published>
		<updated>2023-12-02T00:00:00+00:00</updated>
        <summary>&lt;p&gt;There&#x27;s a new Curtsy Rehearsed album called &lt;em&gt;Leisure Sick&lt;&#x2F;em&gt;.
I made it using an early-version of the node-based Arroost tool.
Several of the songs are built entirely from live-recorded vocal samples.&lt;&#x2F;p&gt;
</summary>
		<link href="https://edibotopic.com/blog/doing/leisure-sick/" type="text/html"/>
		<id>https://edibotopic.com/blog/doing/leisure-sick/</id>
		<content type="html">&lt;p&gt;There&#x27;s a new Curtsy Rehearsed album called &lt;em&gt;Leisure Sick&lt;&#x2F;em&gt;.
I made it using an early-version of the node-based Arroost tool.
Several of the songs are built entirely from live-recorded vocal samples.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;new-ways-to-do-things&quot;&gt;New Ways to Do Things&lt;a class=&quot;zola-anchor&quot; href=&quot;#new-ways-to-do-things&quot; aria-label=&quot;Anchor link for: new-ways-to-do-things&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;315&quot;
    src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;S3FayhhCjNo?si=BoWw9tHqKhInDquD&quot;
    title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer;
    autoplay; clipboard-write; encrypted-media; gyroscope;
    picture-in-picture; web-share&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;edibotopic.com&#x2F;blog&#x2F;doing&#x2F;curtsy-rehearsed&#x2F;&quot;&gt;Previously&lt;&#x2F;a&gt; I wrote about my
&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;curtsyrehearsed.bandcamp.com&#x2F;&quot;&gt;Curtsy Rehearsed&lt;&#x2F;a&gt; project. 
I had been quietly releasing music under this name and was surprised
to have the &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.echolive.ie&#x2F;entertainment&#x2F;whatson&#x2F;arid-40902209.html&quot;&gt;tiniest amount of local media
attention&lt;&#x2F;a&gt;
last year.&lt;&#x2F;p&gt;
&lt;p&gt;The plan was — and still is — to wind down the Curtsy Rehearsed
project by the end of 2023.
In the meantime, my discovery of &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;arroost.com&#x2F;&quot;&gt;Arroost&lt;&#x2F;a&gt; led
to a surprise burst of music-making.&lt;&#x2F;p&gt;
&lt;p&gt;Arroost was a new way of making music for me.
It made the process more light and joyful than some
of my recent painstaking
&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Digital_audio_workstation&quot;&gt;DAW&lt;&#x2F;a&gt; sessions.
In the end, I became quite addicted to Arroost and
releasing a finished project was the only way for me to stop.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;arrows-to-sounds&quot;&gt;Arrows to Sounds&lt;a class=&quot;zola-anchor&quot; href=&quot;#arrows-to-sounds&quot; aria-label=&quot;Anchor link for: arrows-to-sounds&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Arroost consists of an infinite canvas on which nodes can be placed.
When a newly placed node is clicked it starts to record.
Make a sound then click the node again and the recording is complete.
That node will now play the recording each time it is triggered.&lt;&#x2F;p&gt;
&lt;p&gt;There are also special nodes for controlling the Canvas.
At time of writing, these &lt;em&gt;control nodes&lt;&#x2F;em&gt; (my term) include:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Add&lt;&#x2F;strong&gt;: adds a node to the canvas&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Connect&lt;&#x2F;strong&gt;: connects two nodes&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Remove&lt;&#x2F;strong&gt;: removes a node or connection&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Annotate&lt;&#x2F;strong&gt;: adds text next to a block&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Individual nodes can be connected through arrows.
Nodes can be arranged in sequences using these arrows to create patterns.
Given three nodes $A$, $B$ and $C$, a loop can be created if there
are the arrows $A \to B$, $B \to C$ and $C \to A$.
Click a node in a loop and the loop will play continuously.&lt;&#x2F;p&gt;
&lt;p&gt;In the image below a loop can be seen connected by red arrows.
Currently the bottom node in the loop is being triggered.
This will be followed by the top-right node and so on.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;figs&#x2F;arroostUI.webp&quot; alt=&quot;Arroost interface&quot; title=&quot;UI of Arroost&quot; &#x2F;&gt; &lt;em&gt;User interface of Arroost showing control nodes (Add, Connect, Remove and Annotate) and example sound structures (single node, node sequence, node loop). Correct as of 2023-12-02.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There are some other nuances in the design:
empty nodes can be used to create &lt;em&gt;rests&lt;&#x2F;em&gt; within sequences;
the start time of a recorded sample can be offset;
arrows can be coloured to control the flow of sounds.
Many of these features can be discovered naturally through play.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=cF2OF75ivZM&quot;&gt;Watch the creator of Arroost — Lu Wilson — demo the tool at a live
event in London (includes a brief snippet of my first Arroost recording!)&lt;&#x2F;a&gt; &lt;&#x2F;p&gt;
&lt;p&gt;The core of Arroost involves connecting nodes.
This makes Arroost an easy and intuitive live-looper.
By &lt;em&gt;easy&lt;&#x2F;em&gt; I mean relative to using a DAW like Reaper:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;figs&#x2F;super8.webp&quot; alt=&quot;Reaper DAW with Super8 Looper&quot; title=&quot;UI of Reaper with Super8&quot; &#x2F;&gt; &lt;em&gt;User interface of Reaper DAW with four vocal tracks routed into an instance of its Super8 looper. This works great but it takes some setting up and the interface is busy.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Despite its apparent simplicity, Arroost can be used to create
some complex sounds.
Only live vocal samples recorded into my microphone were used to
create the following video, in which you can see the nodes and
connections in action:&lt;&#x2F;p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;315&quot;
    src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;g_tYFdUn3G4?si=t2v4UdP_IrFdtY9d&quot;
    title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer;
    autoplay; clipboard-write; encrypted-media; gyroscope;
    picture-in-picture; web-share&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;h1 id=&quot;becoming-unlocked&quot;&gt;Becoming Unlocked&lt;a class=&quot;zola-anchor&quot; href=&quot;#becoming-unlocked&quot; aria-label=&quot;Anchor link for: becoming-unlocked&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;em&gt;Cans in the Woods&lt;&#x2F;em&gt; is included with eight other songs in &lt;em&gt;Leisure Sickness&lt;&#x2F;em&gt;.
The album is free to download but you can pay more if you&#x27;d like.&lt;&#x2F;p&gt;
&lt;div style=&quot;text-align: center&quot;&gt;
&lt;iframe style=&quot;border: 0; width: 360px; height: 470px;&quot; src=&quot;https:&#x2F;&#x2F;bandcamp.com&#x2F;EmbeddedPlayer&#x2F;album=1240561687&#x2F;size=large&#x2F;bgcol=ffffff&#x2F;linkcol=333333&#x2F;tracklist=false&#x2F;transparent=true&#x2F;&quot; seamless&gt;&lt;a href=&quot;https:&#x2F;&#x2F;curtsyrehearsed.bandcamp.com&#x2F;album&#x2F;leisure-sickness&quot;&gt;Leisure Sickness by Curtsy Rehearsed&lt;&#x2F;a&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;&lt;em&gt;Leisure Sickness&lt;&#x2F;em&gt; is a bit of a departure from my other albums,
primarily because of its emphasis on live-looped vocals.
Three of the songs consist entirely of my sampled voice.&lt;&#x2F;p&gt;
&lt;p&gt;There are vocals strewn across all of my albums but usually
as minor details and often warped beyond recognition.
Arroost unlocked me with respect to vocals through its&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Emphasis on live recording&lt;&#x2F;strong&gt;: it&#x27;s possible to do some
&lt;em&gt;pre-recorded sampling&lt;&#x2F;em&gt; with Arroost; for example, you can
change the audio input settings on your computer and 
record a drumbreak on YouTube.
Arroost is configured, however, to use your default mic for &lt;em&gt;live
sampling&lt;&#x2F;em&gt;.
The most immediate recording option is to just sing, hum, chant, clap and bang.
I could record 5 seconds of sounds with 4 dodgy seconds and then 
take the 1 second I liked for the rest of the song.
It&#x27;s amazing how far this approach can take you as the connections build up.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Limited control of mix quality&lt;&#x2F;strong&gt;: one of the factors that makes 
recording vocals difficult is the need for noise-reduction.
Usually this requires recording some ambient noise and subtracting it
from the recording.
This needs continuous tweaking and can result in poor quality audio if
you&#x27;re not in a good recording environment (I rarely am).
With Arroost I couldn&#x27;t do noise reduction, so I stopped caring and
just focused on recording.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Coupling of audio and visuals&lt;&#x2F;strong&gt;: I normally make songs that are built
from hundreds of samples and recordings.
When people listen I sometimes get the impression that they
don&#x27;t know exactly &lt;em&gt;what I did&lt;&#x2F;em&gt; — it&#x27;s a black box.
Arroost generates a tightly-coupled combination of audio &lt;em&gt;and&lt;&#x2F;em&gt; visuals.
Even if sharing a finished set of nodes and connections, there is
an embedded performance.
I probably couldn&#x27;t sing at your wedding but I can put vocal snippets
together into an interesting structure — I think Arroost helps &lt;em&gt;show&lt;&#x2F;em&gt; this.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;share-scrappy-fiddles&quot;&gt;&amp;quot;Share Scrappy Fiddles&amp;quot;&lt;a class=&quot;zola-anchor&quot; href=&quot;#share-scrappy-fiddles&quot; aria-label=&quot;Anchor link for: share-scrappy-fiddles&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Encouraged by the developer &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.todepond.com&#x2F;&quot;&gt;Lu Wilson&lt;&#x2F;a&gt; calling for everyone to &lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Normalise sharing scrappy fiddles&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I initially shared the tracks on Mastodon as videos.
All in all, I recorded about 60 minutes of music in three weeks.
I took the best of the material shared on Mastodon and tried to improve the sound quality
&lt;em&gt;just a little&lt;&#x2F;em&gt;.
This mainly involved making the recordings slightly louder and removing some
annoying clicking noises.
For songs built from vocals I also added some reverb and saturation to
&amp;quot;fill out&amp;quot; the sound.
This is a little more obvious in the recording below:&lt;&#x2F;p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;315&quot;
    src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;Er_r70gzk-4?si=aAsVocxgyu8Ylj1j&quot;
    title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer;
    autoplay; clipboard-write; encrypted-media; gyroscope;
    picture-in-picture; web-share&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;Lu is continuing to work on Arroost.
From talking with them, the tool will likely evolve considerably.
While writing this post I setup some basic nodes and connections in
Arroost to grab a screenshot for the blog.
Soon after I realised that arrows could now be coloured and that
this affected the flow of sound!!!
This arrow-colouring novelty immediately made me want to stop writing
and start experimenting with Arroost again.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m not sure where Arroost will figure in my music-making future.
Right now, it is the best tool I have ever encountered for rapidly
iterating on song ideas in an experimental fashion.
This is invaluable for someone like me, who lacks any formal training
in music.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Drawing Structures from Notation</title>
		<published>2023-07-16T00:00:00+00:00</published>
		<updated>2023-07-16T00:00:00+00:00</updated>
        <summary>&lt;p&gt;I created a program in the Racket programming language
to draw diagrams based on a symbolic notation that describes
the topology of physical systems.&lt;&#x2F;p&gt;
</summary>
		<link href="https://edibotopic.com/blog/doing/dsf-racket/" type="text/html"/>
		<id>https://edibotopic.com/blog/doing/dsf-racket/</id>
		<content type="html">&lt;p&gt;I created a program in the Racket programming language
to draw diagrams based on a symbolic notation that describes
the topology of physical systems.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;background&quot;&gt;Background&lt;a class=&quot;zola-anchor&quot; href=&quot;#background&quot; aria-label=&quot;Anchor link for: background&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;dispersed-systems&quot;&gt;Dispersed Systems&lt;a class=&quot;zola-anchor&quot; href=&quot;#dispersed-systems&quot; aria-label=&quot;Anchor link for: dispersed-systems&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;A lot of science and engineering concerns &lt;em&gt;dispersed systems&lt;&#x2F;em&gt;.
In this context, &lt;strong&gt;system&lt;&#x2F;strong&gt; relates to there being
many parts comprising the whole.
&lt;strong&gt;Dispersed&lt;&#x2F;strong&gt; refers to sets of parts that are distributed
randomly in space, usually in large number.&lt;&#x2F;p&gt;
&lt;p&gt;Important materials are often &lt;strong&gt;dispersions&lt;&#x2F;strong&gt;, in which there
is one set of parts dispersed in a continuous matrix.
These include liquid foams (e.g., gas bubbles in water),
emulsions (e.g., oil droplets in water) and gels (e.g.,
water droplets in solid).&lt;&#x2F;p&gt;
&lt;p&gt;These dispersion often have characteristic qualities
that are useful to us.
In food, emulsions can simultaneously carry water-
and oil-soluble nutrients, and opacity is generated
by the thousands of oil droplets scattering light.
Dispersions like emulsions and suspensions are also
&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;edibotopic.github.io&#x2F;stokes-law&#x2F;&quot;&gt;intrinsically unstable&lt;&#x2F;a&gt;,
separating over time depending on
properties like particle size and
solvent viscosity.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dsf-formalism&quot;&gt;DSF Formalism&lt;a class=&quot;zola-anchor&quot; href=&quot;#dsf-formalism&quot; aria-label=&quot;Anchor link for: dsf-formalism&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Talking about dispersed systems can get difficult quickly.
This is because many of them contain sub-systems with their
own distinct topologies.
At one level, bread crumb is a solid foam, with gas bubbles
dispersed in a solid matrix.
Zooming out, this foam is enclosed in a solid crust.
Zooming back in, the solid matrix is itself a dispersion
of starch granules.
The following is a mouthful:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;A dispersion of bubbles in a dispersion of starch granules
enclosed in a solid container&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;For this reason, the Dispersed System Formalism (DSF) was
invented by the French scientist
&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Herv%C3%A9_This&quot;&gt;Hervé This&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For decades scientists have referred to oil-in-water
emulsions using the following notation:&lt;&#x2F;p&gt;
&lt;p&gt;$$O&#x2F;W$$&lt;&#x2F;p&gt;
&lt;p&gt;The letters refer to physical phases — &lt;em&gt;O&lt;&#x2F;em&gt;(il) and &lt;em&gt;W&lt;&#x2F;em&gt;(ater) — and
the forward slash refers to the relation &lt;em&gt;dispersed in&lt;&#x2F;em&gt;.
In most cases, DSF simply extends this notation to encompass a
broader class of phases and larger set of relations.
Obviously, a liquid foam could be represented as:&lt;&#x2F;p&gt;
&lt;p&gt;$$G&#x2F;W$$&lt;&#x2F;p&gt;
&lt;p&gt;If a foam is enclosed in a solid we need an additional character
for S(olid) and an additional operator for enclosure (@):&lt;&#x2F;p&gt;
&lt;p&gt;$$(G&#x2F;W)@S$$&lt;&#x2F;p&gt;
&lt;p&gt;The apparatus of DSF has further intricacies, elaborated in
&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;pubmed.ncbi.nlm.nih.gov&#x2F;17875375&#x2F;&quot;&gt;academic papers&lt;&#x2F;a&gt;
Prof This has written on the topic.
For now, this is enough to get started.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dsf-racket&quot;&gt;DSF-racket&lt;a class=&quot;zola-anchor&quot; href=&quot;#dsf-racket&quot; aria-label=&quot;Anchor link for: dsf-racket&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;edibotopic&#x2F;dsf-racket&quot;&gt;DSF-racket&lt;&#x2F;a&gt;
is a racket module (more correctly: two modules)
that can be imported into racket projects.
It allows diagrams to be drawn using DSF notation with &lt;code&gt;dsf.rkt&lt;&#x2F;code&gt;
and tree representations of DSF structures to be drawn with &lt;code&gt;tree.rkt&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;motivation&quot;&gt;Motivation&lt;a class=&quot;zola-anchor&quot; href=&quot;#motivation&quot; aria-label=&quot;Anchor link for: motivation&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;When DSF notation is used it is often necessary to include diagrams.
People might not be familiar with the notation and visualisation helps.
This is also common in similar fields like spatial logic,
mereotopology and formal ontology.
Philosophers, ontologists and computer scientists in these areas
rely on symbolic tools like formal logic and set theory to represent
space, but their papers are also filled with explanatory diagrams.&lt;&#x2F;p&gt;
&lt;p&gt;It seems to me that a tighter coupling between the
symbolic and diagrammatic representations could be fruitful
for three reasons:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;It reduces the workload on the communicator, as diagrams
do not have to be created separately from the notation.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;It creates a learning tool, as manipulation of the
symbols generates diagrams as feedback for the learner.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;It ensures consistency, as two individuals writing
the same notation should always generated an equivalent
diagram.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;how-it-works&quot;&gt;How it Works&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-it-works&quot; aria-label=&quot;Anchor link for: how-it-works&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;symbolising-regions-of-space&quot;&gt;Symbolising Regions of Space&lt;a class=&quot;zola-anchor&quot; href=&quot;#symbolising-regions-of-space&quot; aria-label=&quot;Anchor link for: symbolising-regions-of-space&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;racket-lang.org&#x2F;&quot;&gt;Racket language&lt;&#x2F;a&gt;,
like most &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.britannica.com&#x2F;technology&#x2F;LISP-computer-language&quot;&gt;Lisp&lt;&#x2F;a&gt;
dialects, uses prefix notation.
Instead of writing the expression &lt;code&gt;2 + 3&lt;&#x2F;code&gt; to get the value &lt;code&gt;5&lt;&#x2F;code&gt;,
we write:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rkt&quot; class=&quot;language-rkt z-code&quot;&gt;&lt;code class=&quot;language-rkt&quot; data-lang=&quot;rkt&quot;&gt;&lt;span class=&quot;z-source z-racket&quot;&gt;(+ &lt;span class=&quot;z-constant z-numeric z-integer z-source z-racket&quot;&gt;2&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-source z-racket&quot;&gt;3&lt;&#x2F;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Individual expressions are wrapped in parentheses.&lt;&#x2F;p&gt;
&lt;p&gt;In DSF, &lt;code&gt;O+W&lt;&#x2F;code&gt; means effectively:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Take oil and take water&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;or&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The mixture of oil and water&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Topologically, it means that the two phases are
disconnected from each other in the system.
Here and a few other places I deviate from
the DSF notation slightly, preferring the symbol
$:$ to signify disconnection:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rkt&quot; class=&quot;language-rkt z-code&quot;&gt;&lt;code class=&quot;language-rkt&quot; data-lang=&quot;rkt&quot;&gt;&lt;span class=&quot;z-source z-racket&quot;&gt;(: o w)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If &lt;code&gt;(+ 2 3)&lt;&#x2F;code&gt; returns &lt;code&gt;5&lt;&#x2F;code&gt; what does &lt;code&gt;(: o w)&lt;&#x2F;code&gt; do?
It draws a diagram showing two circles with
different colours that are disconnected.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;github.com&#x2F;edibotopic&#x2F;dsf-racket&#x2F;blob&#x2F;master&#x2F;out&#x2F;mixture.png?raw=true&quot; alt=&quot;Mixture&quot; title=&quot;mixture (: o w)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;To enclose the structure in a solid:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rkt&quot; class=&quot;language-rkt z-code&quot;&gt;&lt;code class=&quot;language-rkt&quot; data-lang=&quot;rkt&quot;&gt;&lt;span class=&quot;z-source z-racket&quot;&gt;(@ (: o w) S)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you are unfamiliar with prefix notation this
might seem confusing, but it is not that difficult.
Taking the inner-most parentheses, we have:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;(mix oil with water)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The $@$ takes this mixture and encloses it
in a container (signified by capital letter):&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;(enclose (mix oil with water) in Solid)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Again, this yields a diagram representing the structure:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;github.com&#x2F;edibotopic&#x2F;dsf-racket&#x2F;blob&#x2F;master&#x2F;out&#x2F;mix-enclose.png?raw=true&quot; alt=&quot;Enclose&quot; title=&quot;Enclosed mixture (@ (: o w) S)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;processes-as-trees&quot;&gt;Processes as Trees&lt;a class=&quot;zola-anchor&quot; href=&quot;#processes-as-trees&quot; aria-label=&quot;Anchor link for: processes-as-trees&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;One of the advantages of prefix notation is that
it closely maps to a tree-like representation.
The previous example of &lt;code&gt;(@ (: o w) S)&lt;&#x2F;code&gt; can be
thought of as a process, consisting of nodes
and connections between those nodes.
Starting at the bottom of the tree,
we would have nodes for oil (o) and water (w)
which together connect to a mix node (:).
This mix node then connects with the
S(olid) container through an enclosure node (@).&lt;&#x2F;p&gt;
&lt;p&gt;A function is included in DSF-racket to draw
such trees from notation.
A structure can be stored as a list in a variable
and then fed into the draw function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rkt&quot; class=&quot;language-rkt z-code&quot;&gt;&lt;code class=&quot;language-rkt&quot; data-lang=&quot;rkt&quot;&gt;&lt;span class=&quot;z-source z-racket&quot;&gt;&lt;span class=&quot;z-meta z-variable z-source z-racket&quot;&gt;(&lt;span class=&quot;z-keyword z-source z-racket&quot;&gt;define&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-variable z-source z-racket&quot;&gt;myStructure&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&amp;#39;(@ (: o w) S)) &lt;span class=&quot;z-comment z-line z-documentation z-source z-racket&quot;&gt;;; store in variable
&lt;&#x2F;span&gt;(draw-tree myStructure) &lt;span class=&quot;z-comment z-line z-documentation z-source z-racket&quot;&gt;;; call the draw function
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;github.com&#x2F;edibotopic&#x2F;dsf-racket&#x2F;blob&#x2F;master&#x2F;out&#x2F;tree-example.png?raw=true&quot; alt=&quot;Tree&quot; title=&quot;Tree (@ (: o w) S)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This can be especially useful when interpreting complex
symbolic&#x2F;diagrammatic representations,
such as the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rkt&quot; class=&quot;language-rkt z-code&quot;&gt;&lt;code class=&quot;language-rkt&quot; data-lang=&quot;rkt&quot;&gt;&lt;span class=&quot;z-source z-racket&quot;&gt;(: s (@ (@ (: o (&amp;amp; w g)) S) S))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;github.com&#x2F;edibotopic&#x2F;dsf-racket&#x2F;blob&#x2F;master&#x2F;out&#x2F;complex.png?raw=true&quot; alt=&quot;Complex&quot; title=&quot;Complex example ((: s (@ (@ (: o (&amp;amp; w g)) S) S)))&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;conceptual-aside-dispersion&quot;&gt;Conceptual Aside: Dispersion&lt;a class=&quot;zola-anchor&quot; href=&quot;#conceptual-aside-dispersion&quot; aria-label=&quot;Anchor link for: conceptual-aside-dispersion&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;What is dispersion?
It is a discrete set of particles in an enclosing container.
What is dispersed is by definition a multiplicity:
there has to be at least two regions of that material
that are mutually disconnected from each other.&lt;&#x2F;p&gt;
&lt;p&gt;This means that to define and draw a dispersion we
just need the $:$ and $@$ operators.
For example, an emulsion of oil droplets in water is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rkt&quot; class=&quot;language-rkt z-code&quot;&gt;&lt;code class=&quot;language-rkt&quot; data-lang=&quot;rkt&quot;&gt;&lt;span class=&quot;z-source z-racket&quot;&gt;(@ (: o o) W)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;github.com&#x2F;edibotopic&#x2F;dsf-racket&#x2F;blob&#x2F;master&#x2F;out&#x2F;emulsion.png?raw=true&quot; alt=&quot;Emulsion&quot; title=&quot;Emulsion (@ (: o o) W)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Of course, many emulsions physically consist of thousands of oil droplets.
We do not, however, need to represent thousands (or even three) droplets
because the critical distinction is that between the continuous (one) and
the discrete (two or more).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;operators-in-dsf-racket&quot;&gt;Operators in DSF-racket&lt;a class=&quot;zola-anchor&quot; href=&quot;#operators-in-dsf-racket&quot; aria-label=&quot;Anchor link for: operators-in-dsf-racket&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Currently the following operators are defined (as functions):&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: center&quot;&gt;Symbol&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: center&quot;&gt;Alias&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;:&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;mix&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;σ&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;connect&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;@&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;enclose&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;&amp;amp;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;overlap&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;^&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;m-connect&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Aliases are provided for more explicit formula definitions.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rkt&quot; class=&quot;language-rkt z-code&quot;&gt;&lt;code class=&quot;language-rkt&quot; data-lang=&quot;rkt&quot;&gt;&lt;span class=&quot;z-source z-racket&quot;&gt;(equal? (mix oil gas) (: o g)) &lt;span class=&quot;z-comment z-line z-documentation z-source z-racket&quot;&gt;;; #t
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;binary&quot;&gt;Binary&lt;a class=&quot;zola-anchor&quot; href=&quot;#binary&quot; aria-label=&quot;Anchor link for: binary&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;The operations briefly defined:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Mix (&lt;code&gt;: x y&lt;&#x2F;code&gt;) — x is disconnected from y&lt;&#x2F;li&gt;
&lt;li&gt;Connect (&lt;code&gt;σ x y&lt;&#x2F;code&gt;) — x is externally connected to y&lt;&#x2F;li&gt;
&lt;li&gt;Enclose (&lt;code&gt;@ x Y&lt;&#x2F;code&gt;) — x is enclosed in a container y&lt;&#x2F;li&gt;
&lt;li&gt;Overlap (&lt;code&gt;&amp;amp; x y&lt;&#x2F;code&gt;) — x overlaps with y&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;ternary&quot;&gt;Ternary&lt;a class=&quot;zola-anchor&quot; href=&quot;#ternary&quot; aria-label=&quot;Anchor link for: ternary&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;The idea of M(ediate)-connection was mentioned in
Whitehead&#x27;s
&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;archive.org&#x2F;details&#x2F;AlfredNorthWhiteheadProcessAndReality&quot;&gt;Process &amp;amp; Reality&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;M-connect (&lt;code&gt;^ x y z&lt;&#x2F;code&gt;): x is connected to y through z&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;primitives&quot;&gt;Primitives&lt;a class=&quot;zola-anchor&quot; href=&quot;#primitives&quot; aria-label=&quot;Anchor link for: primitives&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;atoms&quot;&gt;Atoms&lt;a class=&quot;zola-anchor&quot; href=&quot;#atoms&quot; aria-label=&quot;Anchor link for: atoms&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: center&quot;&gt;Symbol&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: center&quot;&gt;Alias&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;g&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;gas&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;o&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;oil&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;s&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;solid&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;w&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;water&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h4 id=&quot;containers&quot;&gt;Containers&lt;a class=&quot;zola-anchor&quot; href=&quot;#containers&quot; aria-label=&quot;Anchor link for: containers&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: center&quot;&gt;Symbol&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: center&quot;&gt;Alias&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;G&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;Gas&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;O&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;Oil&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;S&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;Solid&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;W&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;Water&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;infix-notation&quot;&gt;Infix Notation&lt;a class=&quot;zola-anchor&quot; href=&quot;#infix-notation&quot; aria-label=&quot;Anchor link for: infix-notation&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Racket supports a (somewhat verbose) form of infix notation.
This involves the use of periods between an operation and its arguments:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rkt&quot; class=&quot;language-rkt z-code&quot;&gt;&lt;code class=&quot;language-rkt&quot; data-lang=&quot;rkt&quot;&gt;&lt;span class=&quot;z-source z-racket&quot;&gt;(equal? (mix o g) (o . mix . g)) &lt;span class=&quot;z-comment z-line z-documentation z-source z-racket&quot;&gt;;; #t
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;why-racket&quot;&gt;Why Racket?&lt;a class=&quot;zola-anchor&quot; href=&quot;#why-racket&quot; aria-label=&quot;Anchor link for: why-racket&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;rapid-prototyping&quot;&gt;Rapid Prototyping&lt;a class=&quot;zola-anchor&quot; href=&quot;#rapid-prototyping&quot; aria-label=&quot;Anchor link for: rapid-prototyping&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I don&#x27;t have much experience with Racket or Lisp.
Despite this, I found it remarkably simple to get
this project functioning in a single afternoon.&lt;&#x2F;p&gt;
&lt;p&gt;Racket installs with an IDE called DrRacket and
several built-in libraries.
Writing the following into the editor is sufficient
to generate an image of a circle:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rkt&quot; class=&quot;language-rkt z-code&quot;&gt;&lt;code class=&quot;language-rkt&quot; data-lang=&quot;rkt&quot;&gt;&lt;span class=&quot;z-source z-racket&quot;&gt;#lang racket &lt;span class=&quot;z-comment z-line z-documentation z-source z-racket&quot;&gt;;;specify the language being used
&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-keywords z-source z-racket&quot;&gt;(&lt;span class=&quot;z-keyword z-source z-racket&quot;&gt;require&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;2htdp&#x2F;image) &lt;span class=&quot;z-comment z-line z-documentation z-source z-racket&quot;&gt;;;use a built-in image library
&lt;&#x2F;span&gt;(circle &lt;span class=&quot;z-constant z-numeric z-integer z-source z-racket&quot;&gt;20&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-source z-racket&quot;&gt;&amp;quot;solid&amp;quot;&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-source z-racket&quot;&gt;&amp;quot;red&amp;quot;&lt;&#x2F;span&gt;) &lt;span class=&quot;z-comment z-line z-documentation z-source z-racket&quot;&gt;;;circle with 20 px radius and solid red fill
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I&#x27;ve played around a lot with programmatic graphics, and this
is easily one of the quickest ways to get up and running.
DrRacket has a REPL in the editor, making it convenient
to quickly test any graphics that you define.
There is an
&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;docs.racket-lang.org&#x2F;quick&#x2F;index.html&quot;&gt;excellent tutorial&lt;&#x2F;a&gt;
for beginners that introduces basic programming concepts using
Racket with pictures.&lt;&#x2F;p&gt;
&lt;p&gt;Early on, I opened a REPL and did something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rkt&quot; class=&quot;language-rkt z-code&quot;&gt;&lt;code class=&quot;language-rkt&quot; data-lang=&quot;rkt&quot;&gt;&lt;span class=&quot;z-source z-racket&quot;&gt;&lt;span class=&quot;z-meta z-variable z-source z-racket&quot;&gt;(&lt;span class=&quot;z-keyword z-source z-racket&quot;&gt;define&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-variable z-source z-racket&quot;&gt;thing&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;(circle &lt;span class=&quot;z-constant z-numeric z-integer z-source z-racket&quot;&gt;20&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-source z-racket&quot;&gt;&amp;quot;solid&amp;quot;&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-source z-racket&quot;&gt;&amp;quot;red&amp;quot;&lt;&#x2F;span&gt;))
&lt;span class=&quot;z-meta z-variable z-source z-racket&quot;&gt;(&lt;span class=&quot;z-keyword z-source z-racket&quot;&gt;define&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-variable z-source z-racket&quot;&gt;otherThing&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;(circle &lt;span class=&quot;z-constant z-numeric z-integer z-source z-racket&quot;&gt;20&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-source z-racket&quot;&gt;&amp;quot;solid&amp;quot;&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-source z-racket&quot;&gt;&amp;quot;blue&amp;quot;&lt;&#x2F;span&gt;))
(beside thing otherThing)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;beside&lt;&#x2F;code&gt; function from &lt;code&gt;2htdp&#x2F;image&lt;&#x2F;code&gt; puts two
shapes — as you might suspect — beside each other.
In this case, the shapes &lt;strong&gt;connect&lt;&#x2F;strong&gt; (σ) at their boundary.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rkt&quot; class=&quot;language-rkt z-code&quot;&gt;&lt;code class=&quot;language-rkt&quot; data-lang=&quot;rkt&quot;&gt;&lt;span class=&quot;z-source z-racket&quot;&gt;&lt;span class=&quot;z-meta z-keywords z-source z-racket&quot;&gt;(&lt;span class=&quot;z-keyword z-source z-racket&quot;&gt;define&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;σ x y
   (beside x y))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It got a little more complicated than this, but
that was the basic idea.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;easy-distribution&quot;&gt;Easy Distribution&lt;a class=&quot;zola-anchor&quot; href=&quot;#easy-distribution&quot; aria-label=&quot;Anchor link for: easy-distribution&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Sharing a Racket program is not as convenient
as sending a link to a web app, but it is
compatible with different user environments.&lt;&#x2F;p&gt;
&lt;p&gt;It is trivial to use the DSF module if you have racket installed.
After a &lt;code&gt;git clone&lt;&#x2F;code&gt; of the repository, the &lt;code&gt;dsf&lt;&#x2F;code&gt; folder can be
copied to a racket project and then imported:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rkt&quot; class=&quot;language-rkt z-code&quot;&gt;&lt;code class=&quot;language-rkt&quot; data-lang=&quot;rkt&quot;&gt;&lt;span class=&quot;z-source z-racket&quot;&gt;&lt;span class=&quot;z-meta z-keywords z-source z-racket&quot;&gt;(&lt;span class=&quot;z-keyword z-source z-racket&quot;&gt;require&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&amp;quot;dsf&#x2F;base.rkt&amp;quot;)

(@ w S) &lt;span class=&quot;z-comment z-line z-documentation z-source z-racket&quot;&gt;;; will draw a diagram
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you are not using DrRacket then Emacs
with Racket Mode installed&#x2F;activated is
a straight replacement.&lt;&#x2F;p&gt;
&lt;p&gt;Using the terminal or (Neo)Vim requires
more work to preview images as you code.&lt;&#x2F;p&gt;
&lt;p&gt;Start a REPL in your terminal with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;racket&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To draw some diagrams you will need &lt;code&gt;dsf&#x2F;base.rkt&lt;&#x2F;code&gt;
and to render them to a frame you will need
&lt;code&gt;racket&#x2F;gui&#x2F;base&lt;&#x2F;code&gt; and &lt;code&gt;pict&lt;&#x2F;code&gt;.
Require them in the REPL:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rkt&quot; class=&quot;language-rkt z-code&quot;&gt;&lt;code class=&quot;language-rkt&quot; data-lang=&quot;rkt&quot;&gt;&lt;span class=&quot;z-source z-racket&quot;&gt;&lt;span class=&quot;z-meta z-keywords z-source z-racket&quot;&gt;(&lt;span class=&quot;z-keyword z-source z-racket&quot;&gt;require&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&amp;quot;dsf&#x2F;base.rkt&amp;quot;)
&lt;span class=&quot;z-meta z-keywords z-source z-racket&quot;&gt;(&lt;span class=&quot;z-keyword z-source z-racket&quot;&gt;require&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;racket&#x2F;gui&#x2F;base pict)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, entering the below code in the REPL will
define a DSF formula and render the diagram in a separate frame:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rkt&quot; class=&quot;language-rkt z-code&quot;&gt;&lt;code class=&quot;language-rkt&quot; data-lang=&quot;rkt&quot;&gt;&lt;span class=&quot;z-source z-racket&quot;&gt;&lt;span class=&quot;z-meta z-variable z-source z-racket&quot;&gt;(&lt;span class=&quot;z-keyword z-source z-racket&quot;&gt;define&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-variable z-source z-racket&quot;&gt;myStructure&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;(@ (@ (σ w o) S) W))

(show-pict myStructure)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Lastly, there is a &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rmculpepper&#x2F;iracket&quot;&gt;Jupyter kernel for Racket&lt;&#x2F;a&gt; — IRacket — that can be used to run Racket code in a Jupyter notebook.&lt;&#x2F;p&gt;
&lt;p&gt;If you have Jupyter and IRacket installed then DSF modules can be
required as described previously and used to draw diagrams.
Make sure that the kernel is set to Racket in your Jupyter instance.&lt;&#x2F;p&gt;
&lt;p&gt;Examples of how the module can be used in
&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;edibotopic&#x2F;dsf-racket&#x2F;tree&#x2F;master&#x2F;docs&quot;&gt;slide presentations (via Racket)&lt;&#x2F;a&gt;
and &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;edibotopic&#x2F;dsf-racket&#x2F;tree&#x2F;master&#x2F;nb&quot;&gt;notebooks (via Jupyter)&lt;&#x2F;a&gt;
are included in the repo.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;a class=&quot;zola-anchor&quot; href=&quot;#next-steps&quot; aria-label=&quot;Anchor link for: next-steps&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I have been fascinated with the general area
of representing space (or more abstract &lt;em&gt;regions&lt;&#x2F;em&gt;)
using symbolic languages for several years.&lt;&#x2F;p&gt;
&lt;p&gt;There are many people in disparate fields working
on such problems, and I have been privately trying
to connect ideas across these fields for some time.&lt;&#x2F;p&gt;
&lt;p&gt;DSF-racket is primarily focused on coupling
symbolic and diagrammatic representations.
I would like to extend the systems it can
represent and to improve the quality of its
diagrams, but it is largely feature-complete.&lt;&#x2F;p&gt;
&lt;p&gt;This post really only touches the surface on
my thoughts on these formalisms, and I will
likely revisit the area in the future.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Music By Curtsy Rehearsed</title>
		<published>2023-07-08T00:00:00+00:00</published>
		<updated>2023-07-08T00:00:00+00:00</updated>
        <summary>&lt;p&gt;Recently, I put the finishing touches on &lt;strong&gt;Dereferenced&lt;&#x2F;strong&gt; — 
the latest and final release from &lt;em&gt;Curtsy Rehearsed&lt;&#x2F;em&gt;.
You can find all music releases by Curtsy Rehearsed
&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;curtsyrehearsed.bandcamp.com&#x2F;&quot;&gt;on the Bandcamp page&lt;&#x2F;a&gt;.
Playable versions of several songs are included in this post.&lt;&#x2F;p&gt;
</summary>
		<link href="https://edibotopic.com/blog/doing/curtsy-rehearsed/" type="text/html"/>
		<id>https://edibotopic.com/blog/doing/curtsy-rehearsed/</id>
		<content type="html">&lt;p&gt;Recently, I put the finishing touches on &lt;strong&gt;Dereferenced&lt;&#x2F;strong&gt; — 
the latest and final release from &lt;em&gt;Curtsy Rehearsed&lt;&#x2F;em&gt;.
You can find all music releases by Curtsy Rehearsed
&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;curtsyrehearsed.bandcamp.com&#x2F;&quot;&gt;on the Bandcamp page&lt;&#x2F;a&gt;.
Playable versions of several songs are included in this post.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;iframe style=&quot;border: 0; width: 350px; height: 350px;&quot; src=&quot;https:&#x2F;&#x2F;bandcamp.com&#x2F;EmbeddedPlayer&#x2F;album=1497359168&#x2F;size=large&#x2F;bgcol=ffffff&#x2F;linkcol=0687f5&#x2F;minimal=true&#x2F;transparent=true&#x2F;&quot; seamless&gt;&lt;a href=&quot;https:&#x2F;&#x2F;curtsyrehearsed.bandcamp.com&#x2F;album&#x2F;dereferenced&quot;&gt;Dereferenced by Curtsy Rehearsed&lt;&#x2F;a&gt;&lt;&#x2F;iframe&gt;
&lt;h2 id=&quot;press-coverage&quot;&gt;Press Coverage&lt;a class=&quot;zola-anchor&quot; href=&quot;#press-coverage&quot; aria-label=&quot;Anchor link for: press-coverage&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;As I have made little to no effort at self-promotion
I was surprised to find that the previous Curtsy Rehearsed
project (released 12 months prior) had received some press 
attention, albeit in a local Irish paper you may not have heard
about:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Found at the business end of a recent Bandcamp dig, there’s
relatively little that your writer knows about coder and
music-maker Shane Crowley, outside of a keenly-honed grasp
on technology’s ever-shifting contours as displayed in blogs
linked out from his Curtsy Rehearsed project’s Bandcamp page.
On the evidence of this lightly glitchy yet slightly woozy
serving of electronic exploration, it’s a state of affairs
your writer would like to rectify.&lt;&#x2F;p&gt;
&lt;p&gt;source: &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.echolive.ie&#x2F;entertainment&#x2F;whatson&#x2F;arid-40902209.html&quot;&gt;Evening Echo&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I like the mini-review, which correctly identifies the
&lt;em&gt;wooziness&lt;&#x2F;em&gt; of the music.
As it happens, the subject of the review —
&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;curtsyrehearsed.bandcamp.com&#x2F;album&#x2F;transitive-nostalgia&quot;&gt;Transitive Nostalgia&lt;&#x2F;a&gt; —
is available for free on its
&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;curtsyrehearsed.bandcamp.com&#x2F;album&#x2F;transitive-nostalgia&quot;&gt;Bandcamp page&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;iframe style=&quot;border: 0; width: 350px; height: 350px;&quot; src=&quot;https:&#x2F;&#x2F;bandcamp.com&#x2F;EmbeddedPlayer&#x2F;album=2113215328&#x2F;size=large&#x2F;bgcol=ffffff&#x2F;linkcol=0687f5&#x2F;minimal=true&#x2F;transparent=true&#x2F;&quot; seamless&gt;&lt;a href=&quot;https:&#x2F;&#x2F;curtsyrehearsed.bandcamp.com&#x2F;album&#x2F;transitive-nostalgia&quot;&gt;Transitive Nostalgia by Curtsy Rehearsed&lt;&#x2F;a&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;This exposure to the most minor of press coverage 
motivated me to explain why I — an academic, non-musician
who last &lt;em&gt;attempted&lt;&#x2F;em&gt; music in school — started this project and
what I was trying to achieve.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;soundtracks-to-lectures&quot;&gt;Soundtracks to Lectures&lt;a class=&quot;zola-anchor&quot; href=&quot;#soundtracks-to-lectures&quot; aria-label=&quot;Anchor link for: soundtracks-to-lectures&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;My original motivation was to soundtrack lectures.
During the era of Covid-19 lockdowns I had to teach remotely.
I wanted to create &lt;em&gt;good&lt;&#x2F;em&gt; lecture videos, which — for me —
had to include music.
In my naivety, I immediately (and fairly) got a copyright
strike on YouTube.
I then found some copyright-free music but hated all of it.
In the absence of alternatives, I decided to make my own music.&lt;&#x2F;p&gt;
&lt;p&gt;The resultant songs are an interesting artifact of the time.
Most of them are included in the three-part
&lt;em&gt;Theory of Parts&lt;&#x2F;em&gt; series, named after a
metaphysics paper I was then struggling to
write and publish.&lt;&#x2F;p&gt;
&lt;p&gt;The anxieties of the early-phase of the pandemic
bled into the songs, even if they were only intended
as interludes to lectures on food chemistry!
One of my favourites from that period — 
&amp;quot;You Won&#x27;t For Long, Then You Will Again&amp;quot; —
was a reflection on the constraints young people were living
under and their anticipation of one day being free of them.
The album art was my &amp;quot;garden&amp;quot; at the time, a network of 
pipes and vents inhabiting a forgotten space behind
city apartments and businesses.&lt;&#x2F;p&gt;
&lt;iframe style=&quot;border: 0; width: 350px; height: 350px;&quot; src=&quot;https:&#x2F;&#x2F;bandcamp.com&#x2F;EmbeddedPlayer&#x2F;album=3148889077&#x2F;size=large&#x2F;bgcol=ffffff&#x2F;linkcol=0687f5&#x2F;minimal=true&#x2F;transparent=true&#x2F;&quot; seamless&gt;&lt;a href=&quot;https:&#x2F;&#x2F;curtsyrehearsed.bandcamp.com&#x2F;album&#x2F;theory-of-parts-continua&quot;&gt;Theory of Parts: Continua by Curtsy Rehearsed&lt;&#x2F;a&gt;&lt;&#x2F;iframe&gt;
&lt;h2 id=&quot;experiment-and-bricolage&quot;&gt;Experiment and Bricolage&lt;a class=&quot;zola-anchor&quot; href=&quot;#experiment-and-bricolage&quot; aria-label=&quot;Anchor link for: experiment-and-bricolage&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I am not a &lt;em&gt;real&lt;&#x2F;em&gt; musician, but I &lt;em&gt;do&lt;&#x2F;em&gt; music.
Not being a musician I rely on whatever
capacity I have &lt;em&gt;as a listener&lt;&#x2F;em&gt; and
an openness to use whatever is to hand.
I find sounds I like and combine them.
When they inevitably sound bad I modify,
replace and arrange until things sound better.&lt;&#x2F;p&gt;
&lt;p&gt;The process is experimental in the &lt;em&gt;scientific&lt;&#x2F;em&gt; sense:
there are a set of questions regarding a mixture of 
components (sounds), followed by an arduous sequences of 
tests of those hypotheses, which may involve the substitution
or modification of those components, before a central
idea begins to emerge and is refined for eventual presentation.&lt;&#x2F;p&gt;
&lt;p&gt;Sometimes I judge that a song has not succeeded.
Yet these failures often get re-incorporated into something new.
A recent successful song-making procedure looked like this:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Two failed songs were re-sampled and combined&lt;&#x2F;li&gt;
&lt;li&gt;A phone recording of me singing incoherently was processed&lt;&#x2F;li&gt;
&lt;li&gt;Samples from a pre-WW1 woodwind performance were incorporated&lt;&#x2F;li&gt;
&lt;li&gt;Everything was tweaked, arranged and mixed over several days&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Other songs were built mostly with code, like 
&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;curtsyrehearsed.bandcamp.com&#x2F;track&#x2F;algotaylorist&quot;&gt;Algotaylorist&lt;&#x2F;a&gt;
using &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;sonic-pi.net&#x2F;&quot;&gt;Sonic Pi&lt;&#x2F;a&gt;
and the &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;curtsyrehearsed.bandcamp.com&#x2F;track&#x2F;dereferenced-2&quot;&gt;title track&lt;&#x2F;a&gt;
of Dereferenced using &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;tidalcycles.org&#x2F;&quot;&gt;Tidal Cycles&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Some others were composed in a more traditional way, with me
poking at a MIDI keyboard in an amateurish manner until I
captured something that sounded right.&lt;&#x2F;p&gt;
&lt;p&gt;I have no universal recipe, partially due to
my own impatience and inconsistency.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;music-for-what-exactly&quot;&gt;Music for What Exactly?&lt;a class=&quot;zola-anchor&quot; href=&quot;#music-for-what-exactly&quot; aria-label=&quot;Anchor link for: music-for-what-exactly&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I wouldn&#x27;t recommend the music for a dinner party.
I don&#x27;t think it can be danced to.
I am unsure if it will lull anyone to sleep.
The songs, I feel, are useful as prompts for thinking about
creativity, memories, technology and modern life.&lt;&#x2F;p&gt;
&lt;p&gt;Having this library of songs helped me conceive and structure lectures.
If I wanted students to feel the gravity of a weighty topic
I would use a more sinister song, like 
&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;curtsyrehearsed.bandcamp.com&#x2F;track&#x2F;being-qua-being-3&quot;&gt;Being Qua Being&lt;&#x2F;a&gt;.
To create a sense of optimism about the potential of science and
technology I might use
&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;curtsyrehearsed.bandcamp.com&#x2F;track&#x2F;progress-is-monotonic-3&quot;&gt;Progress is Monotonic&lt;&#x2F;a&gt;.
In lighter moments, or when I needed to switch gears, I would play
&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;curtsyrehearsed.bandcamp.com&#x2F;track&#x2F;fantasy-machine&quot;&gt;Fantasy Machines&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Sometimes I listen back to these songs and think:
&lt;em&gt;What was I thinking when I made that?&lt;&#x2F;em&gt;
&lt;em&gt;Why does it sound the way it does?&lt;&#x2F;em&gt;
&lt;em&gt;How did I decide to give it that title?&lt;&#x2F;em&gt;
They are — perhaps — tools for introspection.&lt;&#x2F;p&gt;
&lt;iframe style=&quot;border: 0; width: 350px; height: 350px;&quot; src=&quot;https:&#x2F;&#x2F;bandcamp.com&#x2F;EmbeddedPlayer&#x2F;album=3047916957&#x2F;size=large&#x2F;bgcol=ffffff&#x2F;linkcol=0687f5&#x2F;minimal=true&#x2F;track=1884762271&#x2F;transparent=true&#x2F;&quot; seamless&gt;&lt;a href=&quot;https:&#x2F;&#x2F;curtsyrehearsed.bandcamp.com&#x2F;album&#x2F;theory-of-parts-disperse&quot;&gt;Theory of Parts: Disperse by Curtsy Rehearsed&lt;&#x2F;a&gt;&lt;&#x2F;iframe&gt;
&lt;h2 id=&quot;goodbye-curtsy&quot;&gt;Goodbye Curtsy?&lt;a class=&quot;zola-anchor&quot; href=&quot;#goodbye-curtsy&quot; aria-label=&quot;Anchor link for: goodbye-curtsy&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This project has a lot of baggage, forged as it was in a crisis.
I still associate the making of music with the job of doing lectures.
As it was originally intended as &amp;quot;background music&amp;quot; I didn&#x27;t want
to foreground myself too much, which is one of the reasons vocals
are either absent or obscured.&lt;&#x2F;p&gt;
&lt;p&gt;One of the first Curtsy Rehearsed songs does include me singing,
albeit filtered through a fairly heavy vocoder:&lt;&#x2F;p&gt;
&lt;iframe style=&quot;border: 0; width: 350px; height: 350px;&quot; src=&quot;https:&#x2F;&#x2F;bandcamp.com&#x2F;EmbeddedPlayer&#x2F;album=819553730&#x2F;size=large&#x2F;bgcol=ffffff&#x2F;linkcol=0687f5&#x2F;minimal=true&#x2F;track=1694530571&#x2F;transparent=true&#x2F;&quot; seamless&gt;&lt;a href=&quot;https:&#x2F;&#x2F;curtsyrehearsed.bandcamp.com&#x2F;album&#x2F;theory-of-parts-inclusion&quot;&gt;Theory of Parts: Inclusion by Curtsy Rehearsed&lt;&#x2F;a&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;When my voice is present in other songs I might
not even be able to identify it as such.
It could sound like something else entirely now.
Twisted, fragmented and mingled beyond recognition.&lt;&#x2F;p&gt;
&lt;p&gt;Recently, I have wanted to place a greater emphasis on vocals, while
keeping things woozy and weird.
One of my reasons for processing my voice with vocoders and other 
effects was the low-quality of the sound recorded through my 
microphone.
After finally investing in an audio interface, my recording 
quality has increase dramatically.&lt;&#x2F;p&gt;
&lt;p&gt;With better audio fidelity it is time again to experiment with vocals
and lyrics in a serious way for the first time since my
school years (see the 
&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;curtsyrehearsed.bandcamp.com&#x2F;album&#x2F;demake-1-food-rocks-early-demos&quot;&gt;deMake project where I revisit these early demos&lt;&#x2F;a&gt;).
So I am retiring Curtsy Rehearsed to create a new
secret alias. This is to encourage as much
experimentation as possible without concern for how a
wayward student or colleague might react.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;empathy-for-musicians&quot;&gt;Empathy for Musicians&lt;a class=&quot;zola-anchor&quot; href=&quot;#empathy-for-musicians&quot; aria-label=&quot;Anchor link for: empathy-for-musicians&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;One benefit of trying hard to make and release music is the
sense of empathy it creates for those who do this with even
greater seriousness.&lt;&#x2F;p&gt;
&lt;p&gt;Mastering is a complex, technical and artful process,
which I know very little about.
Doing it well ensures that the collection of
sounds have an optimal quality across a 
range of devices, platforms and listening situations.&lt;&#x2F;p&gt;
&lt;p&gt;It reminds me of the least fun part of my other
hobby — app development — where you try to ensure
that the app is available&#x2F;accessible to the broadest
group of people.
Say you&#x27;ve made an interesting game or animation but now:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Does it run on Windows, Mac and Linux?
If it runs in a browser does it run on
this specific browser that 2% of internet 
users still use?
How does it look on the smallest phone screen
on the market?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Similarly, you might make a song that sounds great on
headphones but what about earbuds?
What about one earbud?
What about cheap bluetooth speakers?
What about YouTube after it compresses the file?
Early on I realised that certain
recording artifacts like high-frequency
pops and cracks were only evident when
I listened on earbuds.
So I would try to first mix with
headphones and then with earbuds.
Then I noticed that the mix would
sound muddy through speakers!&lt;&#x2F;p&gt;
&lt;p&gt;Even if you compose, mix and master everything to
your satisfaction, there is no guarantee that the manner
in which it is heard will be as you intended.
A coherent album, with a tone that evolves and
tracks that provide context for each other, may
be summarily dismissed after a 12-15 second
preview of two tracks, listened to out-of-order
through a single bluetooth earbud.&lt;&#x2F;p&gt;
&lt;p&gt;You should be encouraged to learn new skills even 
when they might initially seem beyond your abilities.
You will get better in the trying and 
might even make something worthwhile.
At a minimum, you will develop a greater
appreciation for the difficulties that
its practitioners must overcome.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;curtsyrehearsed.bandcamp.com&#x2F;album&#x2F;dereferenced&quot;&gt;Dereferenced&lt;&#x2F;a&gt; is the final release from Curtsy Rehearsed.&lt;&#x2F;strong&gt;
&lt;strong&gt;Curtsy&#x27;s entire discography can be purchased at a reduced price of 16
euro from the &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;curtsyrehearsed.bandcamp.com&#x2F;&quot;&gt;Bandcamp page&lt;&#x2F;a&gt;.&lt;&#x2F;strong&gt;
&lt;strong&gt;Several individual releases are available for free, including &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;curtsyrehearsed.bandcamp.com&#x2F;album&#x2F;transitive-nostalgia&quot;&gt;Transitive Nostalgia&lt;&#x2F;a&gt;.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Converting Images to 3D Models</title>
		<published>2023-06-12T00:00:00+00:00</published>
		<updated>2023-06-12T00:00:00+00:00</updated>
        <summary>&lt;p&gt;I made a simple web-based tool for converting greyscale images to 3D models.&lt;&#x2F;p&gt;
</summary>
		<link href="https://edibotopic.com/blog/doing/write-height/" type="text/html"/>
		<id>https://edibotopic.com/blog/doing/write-height/</id>
		<content type="html">&lt;p&gt;I made a simple web-based tool for converting greyscale images to 3D models.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Far more powerful software than this tool — &lt;em&gt;WriteHeight&lt;&#x2F;em&gt; — exists but their complexity often presents a significant barrier to newcomers.
Based solely on heightmaps, WriteHeight only requires the user to upload or draw greyscale images.
The 2D image is then converted into a 3D model that can be inspected or downloaded.
This post explains the motivation behind WriteHeight, what it can do and why it still needs a lot of work.&lt;&#x2F;p&gt;
&lt;p&gt;Play around with &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;edibotopic.github.io&#x2F;write-height&#x2F;&quot;&gt;WriteHeight&lt;&#x2F;a&gt; or &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;edibotopic&#x2F;write-height&quot;&gt;read the source code&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;making-3d-easier&quot;&gt;Making 3D Easier&lt;a class=&quot;zola-anchor&quot; href=&quot;#making-3d-easier&quot; aria-label=&quot;Anchor link for: making-3d-easier&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;While not everyone self-identifies as an artist people still draw in a variety of contexts.
I work mostly with scientists who — while not usually artistically-trained — routinely produce drawings in the form of flow diagrams and graphical abstracts.
Whether generated on paper or on a screen, these drawings are an important method of thinking through our ideas and communicating them to others. Concepts can also be represented in 3D, but this traditionally requires a mastery of techniques like shading and perspective.
Today, powerful (and free) software like &lt;a href=&quot;https:&#x2F;&#x2F;edibotopic.com&#x2F;blog&#x2F;doing&#x2F;write-height&#x2F;www.blender.com&quot;&gt;Blender&lt;&#x2F;a&gt; allows the direct manipulation of models in 3D space, and there is an endless supply of online learning resources to get people started.&lt;&#x2F;p&gt;
&lt;p&gt;My initial forays into 3D were prompted by online teaching.
The difficulty in the remote delivery of STEM content lies more with the laboratory practicals than the lectures, and I wanted to learn how to make interactive 3D versions of these labs.
At the same time, I was involved in research projects on the 3D printing of food.
Whether in the context of teaching or research, I found that scientists were reluctant to engage with 3D modelling.
Research papers on topics like 3D food printing often give minimal attention to the design of a given model or the specific purpose of its structure.
The apparent discomfort with 3D design is perhaps unsurprising, given that the transition from 2D to 3D introduces marked complexity.
A 3D scene can require the management of new kinds of elements — like cameras and lights — that are not required when making a 2D image.
Well-constructed scenes can look ugly if the lighting is wrong.
A model may not render or print correctly if the topology is flawed. 
There are different paradigms of modelling, including the direct modelling approach favoured by digital artists and the parametric approach used by mechanical engineers.
Blender is also a hybrid application — combining (at a minimum) a 3D modeller, animation suite, video editor and compositor — and this vast range of functionality is evident in its interface.
Despite all these complexities, much can be learned about 3D modelling from adept teenagers with small YouTube channels.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;figs&#x2F;writeHeightUI.webp&quot; alt=&quot;UI of WriteHeight&quot; title=&quot;UI of WriteHeight&quot; &#x2F;&gt; &lt;em&gt;User interface of WriteHeight showing the 2D heightmap (top-left, inset) and the resultant 3D mesh (main).&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;For me, one of the most intuitive paths for transitioning from drawing in 2D to modelling in 3D is the &lt;strong&gt;heightmap&lt;&#x2F;strong&gt;.
While this approach has its limitations, I think it is a good entry-point to 3D that can produce interesting results.
A heightmap is simply a 2D greyscale image, with an x- and a y-axis.
The relative lightness of pixels in that 2D image can be converted to vertex heights in a 3D model, yielding the third z-axis.
Black pixels become the lowest regions in the model and white pixels the highest regions.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;existing-software&quot;&gt;Existing Software&lt;a class=&quot;zola-anchor&quot; href=&quot;#existing-software&quot; aria-label=&quot;Anchor link for: existing-software&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Most software with 3D capabilities, including dedicated modellers like Blender and game engines like &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;unity.com&#x2F;&quot;&gt;Unity&lt;&#x2F;a&gt;, can generate models from heightmaps; however, if this is all that you want to achieve they are probably overkill.&lt;&#x2F;p&gt;
&lt;p&gt;A separate application is usually required to make the greyscale image that will be transformed into a 3D model.
There are dedicated applications for generating heightmaps from real terrain elevation data, such as &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;tangrams.github.io&#x2F;heightmapper&#x2F;&quot;&gt;Tangram Heightmapper&lt;&#x2F;a&gt;. Another approach is that of
&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;archive.org&#x2F;details&#x2F;jsplacement-1.3.0-allplatforms_202108&quot;&gt;JSplacement&lt;&#x2F;a&gt;, which generates random heightmaps from &lt;em&gt;greebles&lt;&#x2F;em&gt;, smaller greyscale parts that are arranged and combined into larger heightmaps.
With a modern digital drawing app like &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;krita.org&#x2F;en&#x2F;&quot;&gt;Krita&lt;&#x2F;a&gt; the range of possible heightmaps is only limited by your skill and imagination.&lt;&#x2F;p&gt;
&lt;p&gt;Ephtracy&#x27;s &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;ephtracy.github.io&#x2F;index.html?page=aerialod&quot;&gt;Aerialod&lt;&#x2F;a&gt; is dedicated to the specific task of rendering 3D models from heightmaps and comes with a range of options to generate beautiful renders.
Most of my initial heightmap experimentation started with Aerialod, due to its elegance and simplicity.
However, I am now a Linux-user and at time-of-writing Aerialod is only available as a Windows-only download.&lt;&#x2F;p&gt;
&lt;p&gt;For my purposes, I wanted something that was:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Dedicated to making 3D models from heightmaps&lt;&#x2F;li&gt;
&lt;li&gt;Accessible on any device (computer, tablet, phone)&lt;&#x2F;li&gt;
&lt;li&gt;Useable in a browser with no app download required&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;writeheight&quot;&gt;WriteHeight&lt;a class=&quot;zola-anchor&quot; href=&quot;#writeheight&quot; aria-label=&quot;Anchor link for: writeheight&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;As an application WriteHeight is simple.
It opens with a viewport showing a random 3D model, which can be inspected using mouse, touch or arrow keys.
The corresponding 2D image from which the model was generated is shown inset.
The 3D model is rendered using the &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.babylonjs.com&#x2F;&quot;&gt;babylon.js&lt;&#x2F;a&gt; game engine.
Buttons are included below the viewport, one allows for the generation of further random models from a finite collection.
Another allows a user to upload their own heightmap image, which will then be rendered into an inspectable 3D model.
Models can then be downloaded in different formats, including &lt;code&gt;.stl&lt;&#x2F;code&gt; (good for 3D printing) and &lt;code&gt;.glb&lt;&#x2F;code&gt; (good for 3D rendering).&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;callout warning&quot;&gt;
    
    &lt;div class=&quot;icon&quot;&gt;
        &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;20&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.865 3.00017L22.3912 19.5002C22.6674 19.9785 22.5035 20.5901 22.0252 20.8662C21.8732 20.954 21.7008 21.0002 21.5252 21.0002H2.47266C1.92037 21.0002 1.47266 20.5525 1.47266 20.0002C1.47266 19.8246 1.51886 19.6522 1.60663 19.5002L11.1329 3.00017C11.4091 2.52187 12.0206 2.358 12.4989 2.63414C12.651 2.72191 12.7772 2.84815 12.865 3.00017ZM4.20471 19.0002H19.7932L11.9989 5.50017L4.20471 19.0002ZM10.9989 16.0002H12.9989V18.0002H10.9989V16.0002ZM10.9989 9.00017H12.9989V14.0002H10.9989V9.00017Z&quot; fill=&quot;currentColor&quot;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;content&quot;&gt;
        
        &lt;p&gt;&lt;strong&gt;Warning&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
        &lt;p&gt;The drawing tools described below are deprecated as of &lt;code&gt;v0.1.2&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;For convenience, two &lt;em&gt;very basic&lt;&#x2F;em&gt; tools are provided with WriteHeight to generate and download heightmaps.
Clicking the &lt;code&gt;pencil&lt;&#x2F;code&gt; button opens a greyscale drawing tool — this reflects the initial goal of &lt;strong&gt;Write&lt;&#x2F;strong&gt;Height, which was to &lt;em&gt;write&lt;&#x2F;em&gt; heightmaps that could be converted into 3D.
Clicking the &lt;code&gt;walking&lt;&#x2F;code&gt; button opens a random walk visualisation that algorithmically generates a greyscale image — this reflects an ambition for WriteHeight to (eventually) offer a set of simple algorithms for the procedural design of 3D models.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fixing-downloads-bug-v0-1-2&quot;&gt;Fixing Downloads Bug (v0.1.2)&lt;a class=&quot;zola-anchor&quot; href=&quot;#fixing-downloads-bug-v0-1-2&quot; aria-label=&quot;Anchor link for: fixing-downloads-bug-v0-1-2&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote class=&quot;callout note&quot;&gt;
    
    &lt;div class=&quot;icon&quot;&gt;
        &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;20&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22ZM12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20ZM11 7H13V9H11V7ZM11 11H13V17H11V11Z&quot; fill=&quot;currentColor&quot;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;content&quot;&gt;
        
        &lt;p&gt;&lt;strong&gt;Update&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
        &lt;p&gt;The bug described in the original post in which multiple downloads were being
triggered has been resolved as of &lt;code&gt;v0.1.2&lt;&#x2F;code&gt;, as described below.&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;By v0.1.0 WriteHeight worked mostly as expected.
However, there was an annoying bug that caused multiple 3D model files
to download instead of a single model.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bug-description&quot;&gt;Bug Description&lt;a class=&quot;zola-anchor&quot; href=&quot;#bug-description&quot; aria-label=&quot;Anchor link for: bug-description&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Each time a user uploaded a greyscale image a 3D model was generated on
screen.
If another model was subsequently loaded the previous model would &lt;em&gt;visually&lt;&#x2F;em&gt; disappear, 
which is the intended result.
Then when a &lt;code&gt;download&lt;&#x2F;code&gt; button was clicked files for both the visible model and any previous models that had &amp;quot;disappeared&amp;quot; would be downloaded.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bug-fix&quot;&gt;Bug Fix&lt;a class=&quot;zola-anchor&quot; href=&quot;#bug-fix&quot; aria-label=&quot;Anchor link for: bug-fix&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The problem was associated with the UI texture, which included the download
buttons, and how it was repainted each time a new model was generated.
A button labelled &lt;code&gt;STL&lt;&#x2F;code&gt; would trigger the download of an .stl file.
Uploading a second model repainted the UI over the existing UI.
This meant that there was actually &lt;strong&gt;two&lt;&#x2F;strong&gt; superimposed &lt;code&gt;STL&lt;&#x2F;code&gt; buttons.
Clicking then triggered download events associated with the first 
and second button, leading to the download of two models.&lt;&#x2F;p&gt;
&lt;p&gt;To prevent this from happening, each time a new model is loaded we need to
&lt;strong&gt;get&lt;&#x2F;strong&gt; the extant UI, &lt;strong&gt;dispose&lt;&#x2F;strong&gt; of that UI and &lt;strong&gt;set&lt;&#x2F;strong&gt; the &lt;code&gt;UI&lt;&#x2F;code&gt; variable to &lt;code&gt;null&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; class=&quot;language-js z-code&quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-ts&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-var-single-variable z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-definition z-variable z-ts&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-ts&quot;&gt;guiCreate&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt; &lt;span class=&quot;z-meta z-parameters z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-begin z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-end z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-ts&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-keyword z-control z-loop z-ts&quot;&gt;while&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-object z-ts&quot;&gt;scene&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-ts&quot;&gt;getTextureByName&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-single z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;UI&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;{&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-ts&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-var-single-variable z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-definition z-variable z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-constant z-ts&quot;&gt;UI&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-object z-ts&quot;&gt;scene&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-ts&quot;&gt;getTextureByName&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-single z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;UI&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-constant z-object z-ts&quot;&gt;UI&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-ts&quot;&gt;dispose&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-language z-boolean z-false z-ts&quot;&gt;false&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-boolean z-true z-ts&quot;&gt;true&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-variable z-other z-constant z-ts&quot;&gt;UI&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-null z-ts&quot;&gt;null&lt;&#x2F;span&gt;
    &lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

    &lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-ts&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-var-single-variable z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-definition z-variable z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;advancedTexture&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-constant z-object z-ts&quot;&gt;BABYLON&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-constant z-object z-property z-ts&quot;&gt;GUI&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-object z-property z-ts&quot;&gt;AdvancedDynamicTexture&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-ts&quot;&gt;CreateFullscreenUI&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-single z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;UI&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-whitespace z-comment z-leading z-ts&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-ts&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-ts&quot;&gt; UI code here&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With these changes the download bug has been fixed and WriteHeight is
now &lt;em&gt;good enough&lt;&#x2F;em&gt; to again recommend as a convenient tool for creating and
downloading 3D models.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Simulating Stokes&#x27; Law Visually</title>
		<published>2022-08-06T00:00:00+00:00</published>
		<updated>2023-09-09T00:00:00+00:00</updated>
        <summary>&lt;p&gt;I built a simple application to teach factors affecting the floating and sedimentation of particles in liquid.&lt;&#x2F;p&gt;
</summary>
		<link href="https://edibotopic.com/blog/doing/stokes-law/" type="text/html"/>
		<id>https://edibotopic.com/blog/doing/stokes-law/</id>
		<content type="html">&lt;p&gt;I built a simple application to teach factors affecting the floating and sedimentation of particles in liquid.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;blockquote class=&quot;callout note&quot;&gt;
    
    &lt;div class=&quot;icon&quot;&gt;
        &lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 24 24&quot; width=&quot;20&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22ZM12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20ZM11 7H13V9H11V7ZM11 11H13V17H11V11Z&quot; fill=&quot;currentColor&quot;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;content&quot;&gt;
        
        &lt;p&gt;&lt;strong&gt;Update&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
        &lt;p&gt;Since this blog was posted I published an
article on the Stokes&#x27; Law simulation in the &lt;em&gt;Journal of Chemical
Education&lt;&#x2F;em&gt;. &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;pubs.acs.org&#x2F;doi&#x2F;10.1021&#x2F;acs.jchemed.2c01201&quot;&gt;Read it for free here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Many food processes are designed to either promote &lt;em&gt;or&lt;&#x2F;em&gt; prevent the physical separation of particles from liquids. The behaviour governing such separation phenomena is described using an equation known as Stokes&#x27; Law. Students of food science are familiar with this equation, although it is commonly misunderstood. Technical fixes for the physical instabilities in liquid foods are simple and long-standing, yet are sometimes mistrusted by the public. This short post discusses this equation and a simple interactive animation for developing intuition around the phenomena it describes.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;animating-stokes-law&quot;&gt;Animating Stokes&#x27; Law&lt;a class=&quot;zola-anchor&quot; href=&quot;#animating-stokes-law&quot; aria-label=&quot;Anchor link for: animating-stokes-law&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;figs&#x2F;stokesLawUI.webp&quot; alt=&quot;UI of Stokes&#x27; Law&quot; title=&quot;UI of StokesLaw&quot; &#x2F;&gt; &lt;em&gt;User interface for Stokes&#x27; Law simulation showing sliders (top), velocity graph (bottom-left) and statistics (bottom-right). View interactive simulation in &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;edibotopic.github.io&#x2F;stokes-law&#x2F;&quot;&gt;full screen&lt;&#x2F;a&gt; or read the &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;edibotopic&#x2F;stokes-law&quot;&gt;source code&lt;&#x2F;a&gt; to see the JavaScript implementation (if you&#x27;re so inclined)&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Stokes&#x27; Law describes the sedimentation of particles in suspensions (fruit pulp in orange juice) and the flotation of droplets in emulsions (creaming of milk fat). In food science it is invoked for a variety of purposes. One of the most simple techniques for measuring a liquid&#x27;s viscosity involves using Stokes&#x27; Law to estimate the value from the rate at which a ball falls through the liquid. The equation is also used to identify the key parameters that influence how a group of particles fall or rise due to gravity, which can be used to develop strategies to make it happen quicker or slower. A version of the equation is shown below describing the separation velocity ($v$) of particles with diameter $D$ in a solvent with viscosity $\mu$ when subject to acceleration due to gravity $g$. The $\Delta \rho$ means the difference ($\Delta$) between the density ($\rho$) of the particle and the solvent.&lt;&#x2F;p&gt;
&lt;p&gt;$$v = \frac{D^2 \cdot(\Delta \rho) \cdot g }{18 \cdot \mu}$$&lt;&#x2F;p&gt;
&lt;h1 id=&quot;techno-functionality&quot;&gt;Techno-functionality&lt;a class=&quot;zola-anchor&quot; href=&quot;#techno-functionality&quot; aria-label=&quot;Anchor link for: techno-functionality&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Some of the technological solutions informed by Stokes&#x27; Law are the source of routine confusion when &amp;quot;homogenised&amp;quot; is found on a product label or &amp;quot;guar gum&amp;quot; in an ingredients list. Homogenisation is simply a way of physically reducing the size of particles. As the particle diameter value ($D$) in Stokes&#x27; Law is raised to the power of $2$ it has a significant influence on separation speed. Guar gum is one of a variety of food ingredients that has a purely &lt;em&gt;techno-functional&lt;&#x2F;em&gt; role, which typically involves increasing viscosity ($\mu$) so that friction slows particles down as they move through the liquid. Sometimes it might be desirable to promote instability, such as when whole milk is centrifuged to create skim milk and cream, replacing the acceleration due to gravity ($g$) with that due to centrifugal force ($\omega ^2 r$). These factors become more obvious if you play around with the &lt;em&gt;particle diameter&lt;&#x2F;em&gt; and &lt;em&gt;solvent viscosity&lt;&#x2F;em&gt; sliders in the animation. Try the other sliders and you might find some other interesting effects.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;intuition-and-science&quot;&gt;Intuition and Science&lt;a class=&quot;zola-anchor&quot; href=&quot;#intuition-and-science&quot; aria-label=&quot;Anchor link for: intuition-and-science&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Most of us have a good intuition for these phenomena in an everyday context. We expect large stones to sink faster than small pebbles. We know that the air pockets in a wine bottle cork means that it will tend to float on water. In food, the particles involved are often microscopic, making the behavior less &lt;em&gt;salient&lt;&#x2F;em&gt;. Showing a static photograph of particles on a microscope slide does not give us a feel for the dynamics involved. If we are uncomfortable with equations then the mathematics of Stokes&#x27; Law might not help. That&#x27;s why I developed a simple simulation that allows students to manipulate all of the major variables using sliders. I hope this simple &amp;quot;virtual experiment&amp;quot; can improve the intuition of students for the phenomena but also the equation that helps explain them.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;figs&#x2F;cream_40X.webp&quot; alt=&quot;Micrograph of shaving cream&quot; title=&quot;micrograph of cream&quot; &#x2F;&gt; &lt;em&gt;Micrograph of cream showing its emulsion structure. As the oil droplets are less dense than the water surrounding them they tend to float (credit: edibotopic).&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In recent years it has become slightly more common for companies to avoid homogenising their products and to cease adding stabilising ingredients. This is not because of any demonstrable health benefit but rather because these products can be marketed as being &amp;quot;more natural&amp;quot;. This is an interesting case of a technological decision (whether to employ stabilising technology) being influenced by a metaphysical judgement (that technologies have degrees of naturalness) that has real business consequences (there is a market for &amp;quot;natural&amp;quot; foods). In any case, whether we buy a physically-unstable smoothie at a health food store or homogenised milk from the supermarket, we can understand both by appeal to Stokes&#x27; law.&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>